apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'code-quality'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'eu.appsatori'
projectName = 'pipes'
version = '0.6.0'



repositories {
    mavenCentral()
}

dependencies {
    def gaeVersion = '1.6.2.1'

    groovy 'org.codehaus.groovy:groovy-all:1.8.5'

    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-api-labs:$gaeVersion"
    compile 'javax.servlet:servlet-api:2.5'

    testCompile 'org.spockframework:spock-core:0.5-groovy-1.8', {
        exclude group: 'org.codehaus.groovy', name: 'groovy-all'
    }
    testCompile "com.google.appengine:appengine-api-stubs:$gaeVersion"
    testCompile "com.google.appengine:appengine-testing:$gaeVersion"
}



task javadocJar(type: Jar, dependsOn: javadoc) {
	from "${project.docsDir}/javadoc"
	classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			  authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			pom.project {
			   name 'AppSatori Pipes'
			   packaging 'jar'
			   description 'AppSatori Pipes is framework for easier concurrent background processing on Google App Engine Java environment'
			   url 'https://github.com/musketyr/appsatori-pipes'

			   scm {
				   url 'scm:git@github.com:musketyr/appsatori-pipes.git'
				   connection 'scm:git@github.com:musketyr/appsatori-pipes.git'
				   developerConnection 'scm:git@github.com:musketyr/appsatori-pipes.git'
			   }

			   licenses {
				   license {
					   name 'The Apache Software License, Version 2.0'
					   url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					   distribution 'repo'
				   }
			   }

			   developers {
				   developer {
					   id 'vladimirorany'
					   name 'Vladimir Orany'
				   }
			   }
		   }

		   //mess with the generated pom to set the 'packaging' tag
		   pom.withXml { XmlProvider xmlProvider ->
			   def xml = xmlProvider.asString()
			   def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

			   pomXml.version[0] + { packaging('jar') }

			   def newXml = new StringWriter()
			   def printer = new XmlNodePrinter(new PrintWriter(newXml))
			   printer.preserveWhitespace = true
			   printer.print(pomXml)
			   xml.setLength(0)
			   xml.append(newXml.toString())
		   }
		}
	}
}

